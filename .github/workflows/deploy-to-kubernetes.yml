# This workflow demonstrates Kubernetes deployment concepts
# It runs on GitHub runners and deploys to a local Minikube cluster
name: Deploy to Kubernetes

on:
  workflow_run:
    workflows: ["Build and Push Docker Images After PR Merge"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Minikube
        uses: medyagh/setup-minikube@latest
        with:
          minikube-version: 'latest'
          kubernetes-version: 'v1.28.0'
          driver: docker

      - name: Check cluster status
        run: |
          minikube status
          kubectl get nodes

      - name: Deploy PostgreSQL
        run: |
          # Create PostgreSQL deployment
          kubectl create deployment postgres --image=postgres:15
          kubectl set env deployment/postgres POSTGRES_DB=tabloid_db POSTGRES_USER=postgres POSTGRES_PASSWORD=1234
          kubectl expose deployment postgres --port=5432 --target-port=5432
          
          # Wait for PostgreSQL to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/postgres
          echo "‚úÖ PostgreSQL deployed"

      - name: Deploy Backend
        run: |
          # Create backend deployment
          kubectl create deployment backend --image=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/doc-exam/backend:latest
          kubectl set env deployment/backend SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/tabloid_db
          kubectl set env deployment/backend SPRING_DATASOURCE_USERNAME=postgres
          kubectl set env deployment/backend SPRING_DATASOURCE_PASSWORD=1234
          kubectl expose deployment backend --port=8080 --target-port=8080 --type=NodePort
          
          # Wait for backend to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/backend
          echo "‚úÖ Backend deployed"

      - name: Deploy Frontend
        run: |
          # Create frontend deployment
          kubectl create deployment frontend --image=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/doc-exam/frontend:latest
          kubectl set env deployment/frontend VITE_API_HOST=localhost VITE_API_PORT=8080
          kubectl expose deployment frontend --port=5173 --target-port=5173 --type=NodePort
          
          # Wait for frontend to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/frontend
          echo "‚úÖ Frontend deployed"

      - name: Verify deployment
        run: |
          echo "üìä Deployment Status:"
          kubectl get deployments
          kubectl get services
          kubectl get pods
          
          echo "üåê Service URLs:"
          minikube service list

      - name: Show application logs
        run: |
          echo "üìã Application Logs:"
          echo "=== PostgreSQL ==="
          kubectl logs -l app=postgres --tail=10 || echo "No logs yet"
          
          echo "=== Backend ==="
          kubectl logs -l app=backend --tail=10 || echo "No logs yet"
          
          echo "=== Frontend ==="
          kubectl logs -l app=frontend --tail=10 || echo "No logs yet"

      - name: Deployment summary
        run: |
          echo "üéâ Kubernetes Deployment Complete!"
          echo "‚úÖ PostgreSQL database running"
          echo "‚úÖ Spring Boot backend API running" 
          echo "‚úÖ React frontend running"
          echo "‚úÖ All services deployed to Kubernetes cluster on GitHub runner"
